package  eival

import "testing"

const (
	INT64 = iota,
	INT
	INT32
	INT16
	INT8
	UINT64
	UINT
	UINT32
	UINT16
	UINT8
	BYTE
	INT16
	INT8
	FLOAT32
	FLOAT64
	BOOL
	STRING
	TIME
	BYTES
	SLICE
	MAP
)

var names = map[int]string{
	INT64: "INT64", 
	INT: "INT", 
	INT32: "INT32", 
	INT16: "INT16", 
	INT8: "INT8", 
	UINT64: "UINT64", 
	UINT: "UINT", 
	UINT32: "UINT32", 
	UINT16: "UINT16", 
	UINT8: "UINT8", 
	BYTE: "BYTE", 
	FLOAT32: "FLOAT32", 
	FLOAT64: "FLOAT64", 
	BOOL: "BOOL", 
	STRING: "STRING", 
	TIME: "TIME", 
	BYTES: "BYTES", 
	SLICE: "SLICE", 
	MAP: "MAP", 
}

type Result struct {
	V interface{}
	Ok bool
}

func R(v interface{}, ok bool) *Result {
	return &Result{V:v, Ok, ok}
}

type S []interface{}
type M map[string]interface{}

var savedDate := time.Date(2000, time.January, 2, 3, 4, 5, 6, time.UTC)
var values = map[int]S{
	INT64: S{int64(-123456), int64(0), int64(123456)}, 
	INT: S{int(-123456), int(0), int(123456)},
	INT32: S{int32(-123456), int32(0), int32(123456)},
	INT16: S{int16(-123456), int16(0), int16(123456)},
	INT8: S{int8(-123456), int8(0), int8(123456)},
	UINT64: S{uint64(-123456), uint64(0), uint64(123456)},
	UINT: S{uint(-123456), uint(0), uint(123456)},
	UINT32: S{uint32(-123456), uint32(0), uint32(123456)},
	UINT16: S{uint16(-123456), uint16(0), uint16(123456)},
	UINT8: S{uint8(-123456), uint8(0), uint8(123456)},
	BYTE: S{byte(-123456), byte(0), byte(123456)},} 
	FLOAT32: S{float32(-123.456), float32(0.0), float32(123.456)}, 
	FLOAT64: S{float64(-123.456), float64(0.0), float64(123.456)}, 
	BOOL: S{true, false}, 
	STRING: S{"", "123456", "mystring", "true", "-123.456", "2000-01-02T03:04:05.000000006Z", "2000-01-02T03:04:05Z", "Sun Jan  2 03:04:05 2000", "Sun Jan  2 03:04:05 UTC 2000", "Sun Jan 02 03:04:05 +0000 2000", "02 Jan 00 03:04 UTC", "02 Jan 00 03:04 +0000", "Sunday, 02-Jan-00 03:04:05 UTC", "Sun, 02 Jan 2000 03:04:05 UTC", "Sun, 02 Jan 2000 03:04:05 +0000", "2000-01-02 03:04:05", "Jan  2 03:04:05.000", "Jan  2 03:04:05", "3:04AM", "2000-01-02"}, 
	TIME: S{time.Time{}, savedDate}, 
	BYTES: S{[]byte(nil), []byte{}, []byte{0x01, 0x02, 0x03}}, 
	SLICE: S{S(nil), S{}, S{"a", 2, true}}, 
	MAP: S{M(nil), M{}, M{"a": 2, "b": false}}, 
}

var readValues = map[int]map[int]S{
	BOOL: map[int]S{
			STRING: S{ R(bool(false),false), R(bool(false),false), R(bool(false),false), R(bool(true),true), R(bool(false),false), R(bool(false),false), R(bool(false),false), R(bool(false),false), R(bool(false),false), R(bool(false),false), R(bool(false),false), R(bool(false),false), R(bool(false),false), R(bool(false),false), R(bool(false),false), R(bool(false),false), R(bool(false),false), R(bool(false),false), R(bool(false),false), R(bool(false),false) },
			UINT16: S{ R(bool(true),true), R(bool(false),true), R(bool(true),true) },
			FLOAT64: S{ R(bool(true),true), R(bool(false),true), R(bool(true),true) },
			INT32: S{ R(bool(true),true), R(bool(false),true), R(bool(true),true) },
			INT16: S{ R(bool(true),true), R(bool(false),true), R(bool(true),true) },
			BOOL: S{ R(bool(true),true), R(bool(false),true) },
			BYTES: S{ R(bool(false),false), R(bool(false),false), R(bool(false),false) },
			UINT64: S{ R(bool(true),true), R(bool(false),true), R(bool(true),true) },
			BYTE: S{ R(bool(true),true), R(bool(false),true), R(bool(true),true) },
			MAP: S{ R(bool(false),false), R(bool(false),false), R(bool(false),false) },
			FLOAT32: S{ R(bool(true),true), R(bool(false),true), R(bool(true),true) },
			UINT32: S{ R(bool(true),true), R(bool(false),true), R(bool(true),true) },
			UINT8: S{ R(bool(true),true), R(bool(false),true), R(bool(true),true) },
			UINT: S{ R(bool(true),true), R(bool(false),true), R(bool(true),true) },
			INT8: S{ R(bool(true),true), R(bool(false),true), R(bool(true),true) },
			INT: S{ R(bool(true),true), R(bool(false),true), R(bool(true),true) },
			SLICE: S{ R(bool(false),false), R(bool(false),false), R(bool(false),false) },
			INT64: S{ R(bool(true),true), R(bool(false),true), R(bool(true),true) },
			TIME: S{ R(bool(false),false), R(bool(false),false) },
	},
	INT8: map[int]S{
			INT8: S{ R(int8(-123),true), R(int8(0),true), R(int8(123),true) },
			BOOL: S{ R(int8(1),true), R(int8(0),true) },
			INT: S{ R(int8(-64),true), R(int8(0),true), R(int8(64),true) },
			MAP: S{ R(int8(0),false), R(int8(0),false), R(int8(0),false) },
			INT16: S{ R(int8(-123),true), R(int8(0),true), R(int8(123),true) },
			BYTE: S{ R(int8(-128),true), R(int8(0),true), R(int8(64),true) },
			FLOAT64: S{ R(int8(-123),true), R(int8(0),true), R(int8(123),true) },
			UINT: S{ R(int8(-104),true), R(int8(0),true), R(int8(64),true) },
			TIME: S{ R(int8(0),true), R(int8(37),true) },
			INT32: S{ R(int8(-64),true), R(int8(0),true), R(int8(64),true) },
			UINT8: S{ R(int8(-43),true), R(int8(0),true), R(int8(123),true) },
			STRING: S{ R(int8(0),false), R(int8(0),false), R(int8(0),false), R(int8(0),false), R(int8(0),false), R(int8(0),false), R(int8(0),false), R(int8(0),false), R(int8(0),false), R(int8(0),false), R(int8(0),false), R(int8(0),false), R(int8(0),false), R(int8(0),false), R(int8(0),false), R(int8(0),false), R(int8(0),false), R(int8(0),false), R(int8(0),false), R(int8(0),false) },
			UINT64: S{ R(int8(-15),true), R(int8(0),true), R(int8(64),true) },
			INT64: S{ R(int8(-64),true), R(int8(0),true), R(int8(64),true) },
			FLOAT32: S{ R(int8(-123),true), R(int8(0),true), R(int8(123),true) },
			UINT32: S{ R(int8(-15),true), R(int8(0),true), R(int8(64),true) },
			BYTES: S{ R(int8(0),false), R(int8(0),false), R(int8(0),false) },
			UINT16: S{ R(int8(-113),true), R(int8(0),true), R(int8(123),true) },
			SLICE: S{ R(int8(0),false), R(int8(0),false), R(int8(0),false) },
	},
	TIME: map[int]S{
			UINT: S{ R(time.Time(time.Time{wall:0x0, ext:62135662232, loc:(*time.Location)(0x5ac180)}),true), R(time.Time(time.Time{wall:0x0, ext:62135596800, loc:(*time.Location)(0x5ac180)}),true), R(time.Time(time.Time{wall:0x0, ext:62135720256, loc:(*time.Location)(0x5ac180)}),true) },
			FLOAT32: S{ R(time.Time(time.Time{wall:0x206cc2ff, ext:62135596676, loc:(*time.Location)(0x5ac180)}),true), R(time.Time(time.Time{wall:0x0, ext:62135596800, loc:(*time.Location)(0x5ac180)}),true), R(time.Time(time.Time{wall:0x1b2e0701, ext:62135596923, loc:(*time.Location)(0x5ac180)}),true) },
			MAP: S{ R(time.Time(time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}),false), R(time.Time(time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}),false), R(time.Time(time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}),false) },
			STRING: S{ R(time.Time(time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}),false), R(time.Time(time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}),false), R(time.Time(time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}),false), R(time.Time(time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}),false), R(time.Time(time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}),false), R(time.Time(time.Time{wall:0x6, ext:63082379045, loc:(*time.Location)(nil)}),true), R(time.Time(time.Time{wall:0x0, ext:63082379045, loc:(*time.Location)(nil)}),true), R(time.Time(time.Time{wall:0x0, ext:63082379045, loc:(*time.Location)(nil)}),true), R(time.Time(time.Time{wall:0x0, ext:63082379045, loc:(*time.Location)(nil)}),true), R(time.Time(time.Time{wall:0x0, ext:63082379045, loc:(*time.Location)(0xc00003c060)}),true), R(time.Time(time.Time{wall:0x0, ext:63082379040, loc:(*time.Location)(nil)}),true), R(time.Time(time.Time{wall:0x0, ext:63082379040, loc:(*time.Location)(0xc00003c0c0)}),true), R(time.Time(time.Time{wall:0x0, ext:63082379045, loc:(*time.Location)(nil)}),true), R(time.Time(time.Time{wall:0x0, ext:63082379045, loc:(*time.Location)(nil)}),true), R(time.Time(time.Time{wall:0x0, ext:63082379045, loc:(*time.Location)(0xc00003c120)}),true), R(time.Time(time.Time{wall:0x0, ext:63082379045, loc:(*time.Location)(nil)}),true), R(time.Time(time.Time{wall:0x0, ext:-31524955, loc:(*time.Location)(nil)}),true), R(time.Time(time.Time{wall:0x0, ext:-31524955, loc:(*time.Location)(nil)}),true), R(time.Time(time.Time{wall:0x0, ext:-31611360, loc:(*time.Location)(nil)}),true), R(time.Time(time.Time{wall:0x0, ext:63082368000, loc:(*time.Location)(nil)}),true) },
			UINT8: S{ R(time.Time(time.Time{wall:0x0, ext:62135597013, loc:(*time.Location)(0x5ac180)}),true), R(time.Time(time.Time{wall:0x0, ext:62135596800, loc:(*time.Location)(0x5ac180)}),true), R(time.Time(time.Time{wall:0x0, ext:62135596923, loc:(*time.Location)(0x5ac180)}),true) },
			BOOL: S{ R(time.Time(time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}),false), R(time.Time(time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}),false) },
			UINT16: S{ R(time.Time(time.Time{wall:0x0, ext:62135603343, loc:(*time.Location)(0x5ac180)}),true), R(time.Time(time.Time{wall:0x0, ext:62135596800, loc:(*time.Location)(0x5ac180)}),true), R(time.Time(time.Time{wall:0x0, ext:62135596923, loc:(*time.Location)(0x5ac180)}),true) },
			FLOAT64: S{ R(time.Time(time.Time{wall:0x206cc800, ext:62135596676, loc:(*time.Location)(0x5ac180)}),true), R(time.Time(time.Time{wall:0x0, ext:62135596800, loc:(*time.Location)(0x5ac180)}),true), R(time.Time(time.Time{wall:0x1b2e0200, ext:62135596923, loc:(*time.Location)(0x5ac180)}),true) },
			BYTES: S{ R(time.Time(time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}),false), R(time.Time(time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}),false), R(time.Time(time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}),false) 
},
			UINT32: S{ R(time.Time(time.Time{wall:0x0, ext:62136251121, loc:(*time.Location)(0x5ac180)}),true), R(time.Time(time.Time{wall:0x0, ext:62135596800, loc:(*time.Location)(0x5ac180)}),true), R(time.Time(time.Time{wall:0x0, ext:62135720256, loc:(*time.Location)(0x5ac180)}),true) },
			INT64: S{ R(time.Time(time.Time{wall:0x0, ext:62135473344, loc:(*time.Location)(0x5ac180)}),true), R(time.Time(time.Time{wall:0x0, ext:62135596800, loc:(*time.Location)(0x5ac180)}),true), R(time.Time(time.Time{wall:0x0, ext:62135720256, loc:(*time.Location)(0x5ac180)}),true) },
			TIME: S{ R(time.Time(time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}),true), R(time.Time(time.Time{wall:0x6, ext:63082379045, loc:(*time.Location)(nil)}),true) },
			INT: S{ R(time.Time(time.Time{wall:0x0, ext:62135473344, loc:(*time.Location)(0x5ac180)}),true), R(time.Time(time.Time{wall:0x0, ext:62135596800, loc:(*time.Location)(0x5ac180)}),true), R(time.Time(time.Time{wall:0x0, ext:62135720256, loc:(*time.Location)(0x5ac180)}),true) },
			SLICE: S{ R(time.Time(time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}),false), R(time.Time(time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}),false), R(time.Time(time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}),false) 
},
			INT32: S{ R(time.Time(time.Time{wall:0x0, ext:62135473344, loc:(*time.Location)(0x5ac180)}),true), R(time.Time(time.Time{wall:0x0, ext:62135596800, loc:(*time.Location)(0x5ac180)}),true), R(time.Time(time.Time{wall:0x0, ext:62135720256, loc:(*time.Location)(0x5ac180)}),true) },
			INT8: S{ R(time.Time(time.Time{wall:0x0, ext:62135596677, loc:(*time.Location)(0x5ac180)}),true), R(time.Time(time.Time{wall:0x0, ext:62135596800, loc:(*time.Location)(0x5ac180)}),true), R(time.Time(time.Time{wall:0x0, ext:62135596923, loc:(*time.Location)(0x5ac180)}),true) },
			INT16: S{ R(time.Time(time.Time{wall:0x0, ext:62135596677, loc:(*time.Location)(0x5ac180)}),true), R(time.Time(time.Time{wall:0x0, ext:62135596800, loc:(*time.Location)(0x5ac180)}),true), R(time.Time(time.Time{wall:0x0, ext:62135596923, loc:(*time.Location)(0x5ac180)}),true) },
			UINT64: S{ R(time.Time(time.Time{wall:0x0, ext:62136251121, loc:(*time.Location)(0x5ac180)}),true), R(time.Time(time.Time{wall:0x0, ext:62135596800, loc:(*time.Location)(0x5ac180)}),true), R(time.Time(time.Time{wall:0x0, ext:62135720256, loc:(*time.Location)(0x5ac180)}),true) },
			BYTE: S{ R(time.Time(time.Time{wall:0x0, ext:62135596928, loc:(*time.Location)(0x5ac180)}),true), R(time.Time(time.Time{wall:0x0, ext:62135596800, loc:(*time.Location)(0x5ac180)}),true), R(time.Time(time.Time{wall:0x0, ext:62135596864, loc:(*time.Location)(0x5ac180)}),true) },
	},
	SLICE: map[int]S{
			UINT: S{ R([]interface{}([]interface {}(nil)),false), R([]interface{}([]interface {}(nil)),false), R([]interface{}([]interface {}(nil)),false) },
			INT32: S{ R([]interface{}([]interface {}(nil)),false), R([]interface{}([]interface {}(nil)),false), R([]interface{}([]interface {}(nil)),false) },
			MAP: S{ R([]interface{}([]interface {}(nil)),false), R([]interface{}([]interface {}(nil)),false), R([]interface{}([]interface {}(nil)),false) },
			BOOL: S{ R([]interface{}([]interface {}(nil)),false), R([]interface{}([]interface {}(nil)),false) },
			BYTES: S{ R([]interface{}([]interface {}(nil)),false), R([]interface{}([]interface {}(nil)),false), R([]interface{}([]interface {}(nil)),false) },
			SLICE: S{ R([]interface{}([]interface {}(nil)),true), R([]interface{}([]interface {}{}),true), R([]interface{}([]interface {}{"a", 2, true}),true) },
			INT64: S{ R([]interface{}([]interface {}(nil)),false), R([]interface{}([]interface {}(nil)),false), R([]interface{}([]interface {}(nil)),false) },
			UINT8: S{ R([]interface{}([]interface {}(nil)),false), R([]interface{}([]interface {}(nil)),false), R([]interface{}([]interface {}(nil)),false) },
			BYTE: S{ R([]interface{}([]interface {}(nil)),false), R([]interface{}([]interface {}(nil)),false), R([]interface{}([]interface {}(nil)),false) },
			TIME: S{ R([]interface{}([]interface {}(nil)),false), R([]interface{}([]interface {}(nil)),false) },
			INT8: S{ R([]interface{}([]interface {}(nil)),false), R([]interface{}([]interface {}(nil)),false), R([]interface{}([]interface {}(nil)),false) },
			INT16: S{ R([]interface{}([]interface {}(nil)),false), R([]interface{}([]interface {}(nil)),false), R([]interface{}([]interface {}(nil)),false) },
			FLOAT32: S{ R([]interface{}([]interface {}(nil)),false), R([]interface{}([]interface {}(nil)),false), R([]interface{}([]interface {}(nil)),false) },
			STRING: S{ R([]interface{}([]interface {}(nil)),false), R([]interface{}([]interface {}(nil)),false), R([]interface{}([]interface {}(nil)),false), R([]interface{}([]interface {}(nil)),false), R([]interface{}([]interface {}(nil)),false), R([]interface{}([]interface {}(nil)),false), R([]interface{}([]interface {}(nil)),false), R([]interface{}([]interface {}(nil)),false), R([]interface{}([]interface {}(nil)),false), R([]interface{}([]interface {}(nil)),false), R([]interface{}([]interface {}(nil)),false), R([]interface{}([]interface {}(nil)),false), R([]interface{}([]interface {}(nil)),false), R([]interface{}([]interface {}(nil)),false), R([]interface{}([]interface {}(nil)),false), R([]interface{}([]interface {}(nil)),false), R([]interface{}([]interface {}(nil)),false), R([]interface{}([]interface {}(nil)),false), R([]interface{}([]interface {}(nil)),false), R([]interface{}([]interface {}(nil)),false) },
			UINT16: S{ R([]interface{}([]interface {}(nil)),false), R([]interface{}([]interface {}(nil)),false), R([]interface{}([]interface {}(nil)),false) },
			UINT32: S{ R([]interface{}([]interface {}(nil)),false), R([]interface{}([]interface {}(nil)),false), R([]interface{}([]interface {}(nil)),false) },
			INT: S{ R([]interface{}([]interface {}(nil)),false), R([]interface{}([]interface {}(nil)),false), R([]interface{}([]interface {}(nil)),false) },
			UINT64: S{ R([]interface{}([]interface {}(nil)),false), R([]interface{}([]interface {}(nil)),false), R([]interface{}([]interface {}(nil)),false) },
			FLOAT64: S{ R([]interface{}([]interface {}(nil)),false), R([]interface{}([]interface {}(nil)),false), R([]interface{}([]interface {}(nil)),false) },
	},
	UINT16: map[int]S{
			INT8: S{ R(uint16(0xff85),true), R(uint16(0x0),true), R(uint16(0x7b),true) },
			FLOAT32: S{ R(uint16(0xff85),true), R(uint16(0x0),true), R(uint16(0x7b),true) },
			INT: S{ R(uint16(0x1dc0),true), R(uint16(0x0),true), R(uint16(0xe240),true) },
			UINT8: S{ R(uint16(0xd5),true), R(uint16(0x0),true), R(uint16(0x7b),true) },
			UINT16: S{ R(uint16(0x198f),true), R(uint16(0x0),true), R(uint16(0x7b),true) },
			FLOAT64: S{ R(uint16(0xff85),true), R(uint16(0x0),true), R(uint16(0x7b),true) },
			MAP: S{ R(uint16(0x0),false), R(uint16(0x0),false), R(uint16(0x0),false) },
			UINT64: S{ R(uint16(0xfbf1),true), R(uint16(0x0),true), R(uint16(0xe240),true) },
			UINT32: S{ R(uint16(0xfbf1),true), R(uint16(0x0),true), R(uint16(0xe240),true) },
			BOOL: S{ R(uint16(0x1),true), R(uint16(0x0),true) },
			STRING: S{ R(uint16(0x0),false), R(uint16(0x0),false), R(uint16(0x0),false), R(uint16(0x0),false), R(uint16(0x0),false), R(uint16(0x0),false), R(uint16(0x0),false), R(uint16(0x0),false), R(uint16(0x0),false), R(uint16(0x0),false), R(uint16(0x0),false), R(uint16(0x0),false), R(uint16(0x0),false), R(uint16(0x0),false), R(uint16(0x0),false), R(uint16(0x0),false), R(uint16(0x0),false), R(uint16(0x0),false), R(uint16(0x0),false), R(uint16(0x0),false) },
			BYTES: S{ R(uint16(0x0),false), R(uint16(0x0),false), R(uint16(0x0),false) },
			INT32: S{ R(uint16(0x1dc0),true), R(uint16(0x0),true), R(uint16(0xe240),true) },
			INT16: S{ R(uint16(0xff85),true), R(uint16(0x0),true), R(uint16(0x7b),true) },
			SLICE: S{ R(uint16(0x0),false), R(uint16(0x0),false), R(uint16(0x0),false) },
			UINT: S{ R(uint16(0xff98),true), R(uint16(0x0),true), R(uint16(0xe240),true) },
			BYTE: S{ R(uint16(0x80),true), R(uint16(0x0),true), R(uint16(0x40),true) },
			INT64: S{ R(uint16(0x1dc0),true), R(uint16(0x0),true), R(uint16(0xe240),true) },
			TIME: S{ R(uint16(0x900),true), R(uint16(0xc025),true) },
	},
	MAP: map[int]S{
			INT: S{ R(map[string]interface{}(map[string]interface {}(nil)),false), R(map[string]interface{}(map[string]interface {}(nil)),false), R(map[string]interface{}(map[string]interface {}(nil)),false) },
			STRING: S{ R(map[string]interface{}(map[string]interface {}(nil)),false), R(map[string]interface{}(map[string]interface {}(nil)),false), R(map[string]interface{}(map[string]interface {}(nil)),false), R(map[string]interface{}(map[string]interface {}(nil)),false), R(map[string]interface{}(map[string]interface {}(nil)),false), R(map[string]interface{}(map[string]interface {}(nil)),false), R(map[string]interface{}(map[string]interface {}(nil)),false), R(map[string]interface{}(map[string]interface {}(nil)),false), R(map[string]interface{}(map[string]interface {}(nil)),false), R(map[string]interface{}(map[string]interface {}(nil)),false), R(map[string]interface{}(map[string]interface {}(nil)),false), R(map[string]interface{}(map[string]interface {}(nil)),false), R(map[string]interface{}(map[string]interface {}(nil)),false), R(map[string]interface{}(map[string]interface {}(nil)),false), R(map[string]interface{}(map[string]interface {}(nil)),false), R(map[string]interface{}(map[string]interface {}(nil)),false), R(map[string]interface{}(map[string]interface {}(nil)),false), R(map[string]interface{}(map[string]interface {}(nil)),false), R(map[string]interface{}(map[string]interface {}(nil)),false), R(map[string]interface{}(map[string]interface {}(nil)),false) },
			INT8: S{ R(map[string]interface{}(map[string]interface {}(nil)),false), R(map[string]interface{}(map[string]interface {}(nil)),false), R(map[string]interface{}(map[string]interface {}(nil)),false) },
			FLOAT32: S{ R(map[string]interface{}(map[string]interface {}(nil)),false), R(map[string]interface{}(map[string]interface {}(nil)),false), R(map[string]interface{}(map[string]interface {}(nil)),false) },
			UINT: S{ R(map[string]interface{}(map[string]interface {}(nil)),false), R(map[string]interface{}(map[string]interface {}(nil)),false), R(map[string]interface{}(map[string]interface {}(nil)),false) },
			FLOAT64: S{ R(map[string]interface{}(map[string]interface {}(nil)),false), R(map[string]interface{}(map[string]interface {}(nil)),false), R(map[string]interface{}(map[string]interface {}(nil)),false) },
			INT32: S{ R(map[string]interface{}(map[string]interface {}(nil)),false), R(map[string]interface{}(map[string]interface {}(nil)),false), R(map[string]interface{}(map[string]interface {}(nil)),false) },
			UINT64: S{ R(map[string]interface{}(map[string]interface {}(nil)),false), R(map[string]interface{}(map[string]interface {}(nil)),false), R(map[string]interface{}(map[string]interface {}(nil)),false) },
			BOOL: S{ R(map[string]interface{}(map[string]interface {}(nil)),false), R(map[string]interface{}(map[string]interface {}(nil)),false) },
			BYTES: S{ R(map[string]interface{}(map[string]interface {}(nil)),false), R(map[string]interface{}(map[string]interface {}(nil)),false), R(map[string]interface{}(map[string]interface {}(nil)),false) },
			TIME: S{ R(map[string]interface{}(map[string]interface {}(nil)),false), R(map[string]interface{}(map[string]interface {}(nil)),false) },
			INT16: S{ R(map[string]interface{}(map[string]interface {}(nil)),false), R(map[string]interface{}(map[string]interface {}(nil)),false), R(map[string]interface{}(map[string]interface {}(nil)),false) },
			UINT32: S{ R(map[string]interface{}(map[string]interface {}(nil)),false), R(map[string]interface{}(map[string]interface {}(nil)),false), R(map[string]interface{}(map[string]interface {}(nil)),false) },
			UINT8: S{ R(map[string]interface{}(map[string]interface {}(nil)),false), R(map[string]interface{}(map[string]interface {}(nil)),false), R(map[string]interface{}(map[string]interface {}(nil)),false) },
			INT64: S{ R(map[string]interface{}(map[string]interface {}(nil)),false), R(map[string]interface{}(map[string]interface {}(nil)),false), R(map[string]interface{}(map[string]interface {}(nil)),false) },
			UINT16: S{ R(map[string]interface{}(map[string]interface {}(nil)),false), R(map[string]interface{}(map[string]interface {}(nil)),false), R(map[string]interface{}(map[string]interface {}(nil)),false) },
			BYTE: S{ R(map[string]interface{}(map[string]interface {}(nil)),false), R(map[string]interface{}(map[string]interface {}(nil)),false), R(map[string]interface{}(map[string]interface {}(nil)),false) },
			SLICE: S{ R(map[string]interface{}(map[string]interface {}(nil)),false), R(map[string]interface{}(map[string]interface {}(nil)),false), R(map[string]interface{}(map[string]interface {}(nil)),false) },
			MAP: S{ R(map[string]interface{}(map[string]interface {}(nil)),true), R(map[string]interface{}(map[string]interface {}{}),true), R(map[string]interface{}(map[string]interface {}{"a":2, "b":false}),true) },
	},
	UINT8: map[int]S{
			SLICE: S{ R(uint8(0x0),false), R(uint8(0x0),false), R(uint8(0x0),false) },
			INT64: S{ R(uint8(0xc0),true), R(uint8(0x0),true), R(uint8(0x40),true) },
			UINT8: S{ R(uint8(0xd5),true), R(uint8(0x0),true), R(uint8(0x7b),true) },
			BOOL: S{ R(uint8(0x1),true), R(uint8(0x0),true) },
			STRING: S{ R(uint8(0x0),false), R(uint8(0x0),false), R(uint8(0x0),false), R(uint8(0x0),false), R(uint8(0x0),false), R(uint8(0x0),false), R(uint8(0x0),false), R(uint8(0x0),false), R(uint8(0x0),false), R(uint8(0x0),false), R(uint8(0x0),false), R(uint8(0x0),false), R(uint8(0x0),false), R(uint8(0x0),false), R(uint8(0x0),false), R(uint8(0x0),false), R(uint8(0x0),false), R(uint8(0x0),false), R(uint8(0x0),false), R(uint8(0x0),false) },
			UINT64: S{ R(uint8(0xf1),true), R(uint8(0x0),true), R(uint8(0x40),true) },
			UINT32: S{ R(uint8(0xf1),true), R(uint8(0x0),true), R(uint8(0x40),true) },
			INT: S{ R(uint8(0xc0),true), R(uint8(0x0),true), R(uint8(0x40),true) },
			FLOAT64: S{ R(uint8(0x85),true), R(uint8(0x0),true), R(uint8(0x7b),true) },
			UINT16: S{ R(uint8(0x8f),true), R(uint8(0x0),true), R(uint8(0x7b),true) },
			BYTE: S{ R(uint8(0x80),true), R(uint8(0x0),true), R(uint8(0x40),true) },
			INT32: S{ R(uint8(0xc0),true), R(uint8(0x0),true), R(uint8(0x40),true) },
			INT8: S{ R(uint8(0x85),true), R(uint8(0x0),true), R(uint8(0x7b),true) },
			UINT: S{ R(uint8(0x98),true), R(uint8(0x0),true), R(uint8(0x40),true) },
			TIME: S{ R(uint8(0x0),true), R(uint8(0x25),true) },
			MAP: S{ R(uint8(0x0),false), R(uint8(0x0),false), R(uint8(0x0),false) },
			INT16: S{ R(uint8(0x85),true), R(uint8(0x0),true), R(uint8(0x7b),true) },
			FLOAT32: S{ R(uint8(0x85),true), R(uint8(0x0),true), R(uint8(0x7b),true) },
			BYTES: S{ R(uint8(0x0),false), R(uint8(0x0),false), R(uint8(0x0),false) },
	},
	BYTE: map[int]S{
			UINT64: S{ R(byte(0xf1),true), R(byte(0x0),true), R(byte(0x40),true) },
			UINT32: S{ R(byte(0xf1),true), R(byte(0x0),true), R(byte(0x40),true) },
			FLOAT64: S{ R(byte(0x85),true), R(byte(0x0),true), R(byte(0x7b),true) },
			INT64: S{ R(byte(0xc0),true), R(byte(0x0),true), R(byte(0x40),true) },
			UINT: S{ R(byte(0x98),true), R(byte(0x0),true), R(byte(0x40),true) },
			UINT16: S{ R(byte(0x8f),true), R(byte(0x0),true), R(byte(0x7b),true) },
			UINT8: S{ R(byte(0xd5),true), R(byte(0x0),true), R(byte(0x7b),true) },
			BOOL: S{ R(byte(0x1),true), R(byte(0x0),true) },
			INT: S{ R(byte(0xc0),true), R(byte(0x0),true), R(byte(0x40),true) },
			INT16: S{ R(byte(0x85),true), R(byte(0x0),true), R(byte(0x7b),true) },
			BYTES: S{ R(byte(0x0),false), R(byte(0x0),false), R(byte(0x0),false) },
			INT8: S{ R(byte(0x85),true), R(byte(0x0),true), R(byte(0x7b),true) },
			TIME: S{ R(byte(0x0),true), R(byte(0x25),true) },
			STRING: S{ R(byte(0x0),false), R(byte(0x0),false), R(byte(0x0),false), R(byte(0x0),false), R(byte(0x0),false), R(byte(0x0),false), R(byte(0x0),false), R(byte(0x0),false), R(byte(0x0),false), R(byte(0x0),false), R(byte(0x0),false), R(byte(0x0),false), R(byte(0x0),false), R(byte(0x0),false), R(byte(0x0),false), R(byte(0x0),false), R(byte(0x0),false), R(byte(0x0),false), R(byte(0x0),false), R(byte(0x0),false) },
			INT32: S{ R(byte(0xc0),true), R(byte(0x0),true), R(byte(0x40),true) },
			BYTE: S{ R(byte(0x80),true), R(byte(0x0),true), R(byte(0x40),true) },
			SLICE: S{ R(byte(0x0),false), R(byte(0x0),false), R(byte(0x0),false) },
			FLOAT32: S{ R(byte(0x85),true), R(byte(0x0),true), R(byte(0x7b),true) },
			MAP: S{ R(byte(0x0),false), R(byte(0x0),false), R(byte(0x0),false) },
	},
	FLOAT64: map[int]S{
			INT32: S{ R(float64(-123456),true), R(float64(0),true), R(float64(123456),true) },
			INT16: S{ R(float64(-123),true), R(float64(0),true), R(float64(123),true) },
			TIME: S{ R(float64(-6.21355968e+10),true), R(float64(9.46782245e+08),true) },
			FLOAT32: S{ R(float64(-123.45600128173828),true), R(float64(0),true), R(float64(123.45600128173828),true) },
			INT: S{ R(float64(-123456),true), R(float64(0),true), R(float64(123456),true) },
			UINT64: S{ R(float64(654321),true), R(float64(0),true), R(float64(123456),true) },
			STRING: S{ R(float64(0),false), R(float64(123456),true), R(float64(0),false), R(float64(0),false), R(float64(-123.456),true), R(float64(0),false), R(float64(0),false), R(float64(0),false), R(float64(0),false), R(float64(0),false), R(float64(0),false), R(float64(0),false), R(float64(0),false), R(float64(0),false), R(float64(0),false), R(float64(0),false), R(float64(0),false), R(float64(0),false), R(float64(0),false), R(float64(0),false) },
			INT8: S{ R(float64(-123),true), R(float64(0),true), R(float64(123),true) },
			MAP: S{ R(float64(0),false), R(float64(0),false), R(float64(0),false) },
			UINT32: S{ R(float64(654321),true), R(float64(0),true), R(float64(123456),true) },
			INT64: S{ R(float64(-123456),true), R(float64(0),true), R(float64(123456),true) },
			BYTE: S{ R(float64(128),true), R(float64(0),true), R(float64(64),true) },
			SLICE: S{ R(float64(0),false), R(float64(0),false), R(float64(0),false) },
			UINT8: S{ R(float64(213),true), R(float64(0),true), R(float64(123),true) },
			BOOL: S{ R(float64(1),true), R(float64(0),true) },
			BYTES: S{ R(float64(0),false), R(float64(0),false), R(float64(0),false) },
			UINT: S{ R(float64(65432),true), R(float64(0),true), R(float64(123456),true) },
			UINT16: S{ R(float64(6543),true), R(float64(0),true), R(float64(123),true) },
			FLOAT64: S{ R(float64(-123.456),true), R(float64(0),true), R(float64(123.456),true) },
	},
	INT64: map[int]S{
			INT16: S{ R(int64(-123),true), R(int64(0),true), R(int64(123),true) },
			BOOL: S{ R(int64(1),true), R(int64(0),true) },
			STRING: S{ R(int64(0),false), R(int64(123456),true), R(int64(0),false), R(int64(0),false), R(int64(0),false), R(int64(0),false), R(int64(0),false), R(int64(0),false), R(int64(0),false), R(int64(0),false), R(int64(0),false), R(int64(0),false), R(int64(0),false), R(int64(0),false), R(int64(0),false), R(int64(0),false), R(int64(0),false), R(int64(0),false), R(int64(0),false), R(int64(0),false) },
			INT64: S{ R(int64(-123456),true), R(int64(0),true), R(int64(123456),true) },
			UINT: S{ R(int64(65432),true), R(int64(0),true), R(int64(123456),true) },
			BYTE: S{ R(int64(128),true), R(int64(0),true), R(int64(64),true) },
			INT32: S{ R(int64(-123456),true), R(int64(0),true), R(int64(123456),true) },
			MAP: S{ R(int64(0),false), R(int64(0),false), R(int64(0),false) },
			BYTES: S{ R(int64(0),false), R(int64(0),false), R(int64(0),false) },
			FLOAT64: S{ R(int64(-123),true), R(int64(0),true), R(int64(123),true) },
			SLICE: S{ R(int64(0),false), R(int64(0),false), R(int64(0),false) },
			UINT16: S{ R(int64(6543),true), R(int64(0),true), R(int64(123),true) },
			INT: S{ R(int64(-123456),true), R(int64(0),true), R(int64(123456),true) },
			UINT8: S{ R(int64(213),true), R(int64(0),true), R(int64(123),true) },
			TIME: S{ R(int64(-62135596800),true), R(int64(946782245),true) },
			FLOAT32: S{ R(int64(-123),true), R(int64(0),true), R(int64(123),true) },
			UINT64: S{ R(int64(654321),true), R(int64(0),true), R(int64(123456),true) },
			UINT32: S{ R(int64(654321),true), R(int64(0),true), R(int64(123456),true) },
			INT8: S{ R(int64(-123),true), R(int64(0),true), R(int64(123),true) },
	},
	INT16: map[int]S{
			UINT16: S{ R(int16(6543),true), R(int16(0),true), R(int16(123),true) },
			STRING: S{ R(int16(0),false), R(int16(0),false), R(int16(0),false), R(int16(0),false), R(int16(0),false), R(int16(0),false), R(int16(0),false), R(int16(0),false), R(int16(0),false), R(int16(0),false), R(int16(0),false), R(int16(0),false), R(int16(0),false), R(int16(0),false), R(int16(0),false), R(int16(0),false), R(int16(0),false), R(int16(0),false), R(int16(0),false), R(int16(0),false) },
			UINT32: S{ R(int16(-1039),true), R(int16(0),true), R(int16(-7616),true) },
			UINT: S{ R(int16(-104),true), R(int16(0),true), R(int16(-7616),true) },
			INT8: S{ R(int16(-123),true), R(int16(0),true), R(int16(123),true) },
			INT16: S{ R(int16(-123),true), R(int16(0),true), R(int16(123),true) },
			INT: S{ R(int16(7616),true), R(int16(0),true), R(int16(-7616),true) },
			FLOAT64: S{ R(int16(-123),true), R(int16(0),true), R(int16(123),true) },
			SLICE: S{ R(int16(0),false), R(int16(0),false), R(int16(0),false) },
			BYTE: S{ R(int16(128),true), R(int16(0),true), R(int16(64),true) },
			INT32: S{ R(int16(7616),true), R(int16(0),true), R(int16(-7616),true) },
			BOOL: S{ R(int16(1),true), R(int16(0),true) },
			UINT8: S{ R(int16(213),true), R(int16(0),true), R(int16(123),true) },
			BYTES: S{ R(int16(0),false), R(int16(0),false), R(int16(0),false) },
			UINT64: S{ R(int16(-1039),true), R(int16(0),true), R(int16(-7616),true) },
			INT64: S{ R(int16(7616),true), R(int16(0),true), R(int16(-7616),true) },
			TIME: S{ R(int16(2304),true), R(int16(-16347),true) },
			FLOAT32: S{ R(int16(-123),true), R(int16(0),true), R(int16(123),true) },
			MAP: S{ R(int16(0),false), R(int16(0),false), R(int16(0),false) },
	},
	UINT64: map[int]S{
			UINT32: S{ R(uint64(0x9fbf1),true), R(uint64(0x0),true), R(uint64(0x1e240),true) },
			SLICE: S{ R(uint64(0x0),false), R(uint64(0x0),false), R(uint64(0x0),false) },
			INT8: S{ R(uint64(0xffffffffffffff85),true), R(uint64(0x0),true), R(uint64(0x7b),true) },
			STRING: S{ R(uint64(0x0),false), R(uint64(0x1e240),true), R(uint64(0x0),false), R(uint64(0x0),false), R(uint64(0x0),false), R(uint64(0x0),false), R(uint64(0x0),false), R(uint64(0x0),false), R(uint64(0x0),false), R(uint64(0x0),false), 
R(uint64(0x0),false), R(uint64(0x0),false), R(uint64(0x0),false), R(uint64(0x0),false), R(uint64(0x0),false), R(uint64(0x0),false), R(uint64(0x0),false), R(uint64(0x0),false), R(uint64(0x0),false), R(uint64(0x0),false) },
			INT64: S{ R(uint64(0xfffffffffffe1dc0),true), R(uint64(0x0),true), R(uint64(0x1e240),true) },
			UINT8: S{ R(uint64(0xd5),true), R(uint64(0x0),true), R(uint64(0x7b),true) },
			INT32: S{ R(uint64(0xfffffffffffe1dc0),true), R(uint64(0x0),true), R(uint64(0x1e240),true) },
			FLOAT32: S{ R(uint64(0xffffffffffffff85),true), R(uint64(0x0),true), R(uint64(0x7b),true) },
			MAP: S{ R(uint64(0x0),false), R(uint64(0x0),false), R(uint64(0x0),false) },
			BYTES: S{ R(uint64(0x0),false), R(uint64(0x0),false), R(uint64(0x0),false) },
			BOOL: S{ R(uint64(0x1),true), R(uint64(0x0),true) },
			UINT16: S{ R(uint64(0x198f),true), R(uint64(0x0),true), R(uint64(0x7b),true) },
			BYTE: S{ R(uint64(0x80),true), R(uint64(0x0),true), R(uint64(0x40),true) },
			FLOAT64: S{ R(uint64(0xffffffffffffff85),true), R(uint64(0x0),true), R(uint64(0x7b),true) },
			INT: S{ R(uint64(0xfffffffffffe1dc0),true), R(uint64(0x0),true), R(uint64(0x1e240),true) },
			UINT64: S{ R(uint64(0x9fbf1),true), R(uint64(0x0),true), R(uint64(0x1e240),true) },
			UINT: S{ R(uint64(0xff98),true), R(uint64(0x0),true), R(uint64(0x1e240),true) },
			TIME: S{ R(uint64(0xfffffff1886e0900),true), R(uint64(0x386ec025),true) },
			INT16: S{ R(uint64(0xffffffffffffff85),true), R(uint64(0x0),true), R(uint64(0x7b),true) },
	},
	UINT32: map[int]S{
			UINT: S{ R(uint32(0xff98),true), R(uint32(0x0),true), R(uint32(0x1e240),true) },
			INT16: S{ R(uint32(0xffffff85),true), R(uint32(0x0),true), R(uint32(0x7b),true) },
			INT: S{ R(uint32(0xfffe1dc0),true), R(uint32(0x0),true), R(uint32(0x1e240),true) },
			BOOL: S{ R(uint32(0x1),true), R(uint32(0x0),true) },
			STRING: S{ R(uint32(0x0),false), R(uint32(0x1e240),true), R(uint32(0x0),false), R(uint32(0x0),false), R(uint32(0x0),false), R(uint32(0x0),false), R(uint32(0x0),false), R(uint32(0x0),false), R(uint32(0x0),false), R(uint32(0x0),false), 
R(uint32(0x0),false), R(uint32(0x0),false), R(uint32(0x0),false), R(uint32(0x0),false), R(uint32(0x0),false), R(uint32(0x0),false), R(uint32(0x0),false), R(uint32(0x0),false), R(uint32(0x0),false), R(uint32(0x0),false) },
			INT8: S{ R(uint32(0xffffff85),true), R(uint32(0x0),true), R(uint32(0x7b),true) },
			FLOAT32: S{ R(uint32(0xffffff85),true), R(uint32(0x0),true), R(uint32(0x7b),true) },
			UINT16: S{ R(uint32(0x198f),true), R(uint32(0x0),true), R(uint32(0x7b),true) },
			SLICE: S{ R(uint32(0x0),false), R(uint32(0x0),false), R(uint32(0x0),false) },
			INT32: S{ R(uint32(0xfffe1dc0),true), R(uint32(0x0),true), R(uint32(0x1e240),true) },
			TIME: S{ R(uint32(0x886e0900),true), R(uint32(0x386ec025),true) },
			BYTES: S{ R(uint32(0x0),false), R(uint32(0x0),false), R(uint32(0x0),false) },
			INT64: S{ R(uint32(0xfffe1dc0),true), R(uint32(0x0),true), R(uint32(0x1e240),true) },
			BYTE: S{ R(uint32(0x80),true), R(uint32(0x0),true), R(uint32(0x40),true) },
			FLOAT64: S{ R(uint32(0xffffff85),true), R(uint32(0x0),true), R(uint32(0x7b),true) },
			MAP: S{ R(uint32(0x0),false), R(uint32(0x0),false), R(uint32(0x0),false) },
			UINT64: S{ R(uint32(0x9fbf1),true), R(uint32(0x0),true), R(uint32(0x1e240),true) },
			UINT32: S{ R(uint32(0x9fbf1),true), R(uint32(0x0),true), R(uint32(0x1e240),true) },
			UINT8: S{ R(uint32(0xd5),true), R(uint32(0x0),true), R(uint32(0x7b),true) },
	},
	INT: map[int]S{
			BYTES: S{ R(int(0),false), R(int(0),false), R(int(0),false) },
			SLICE: S{ R(int(0),false), R(int(0),false), R(int(0),false) },
			UINT: S{ R(int(65432),true), R(int(0),true), R(int(123456),true) },
			INT8: S{ R(int(-123),true), R(int(0),true), R(int(123),true) },
			FLOAT32: S{ R(int(-123),true), R(int(0),true), R(int(123),true) },
			BOOL: S{ R(int(1),true), R(int(0),true) },
			BYTE: S{ R(int(128),true), R(int(0),true), R(int(64),true) },
			INT64: S{ R(int(-123456),true), R(int(0),true), R(int(123456),true) },
			MAP: S{ R(int(0),false), R(int(0),false), R(int(0),false) },
			INT16: S{ R(int(-123),true), R(int(0),true), R(int(123),true) },
			UINT32: S{ R(int(654321),true), R(int(0),true), R(int(123456),true) },
			UINT8: S{ R(int(213),true), R(int(0),true), R(int(123),true) },
			STRING: S{ R(int(0),false), R(int(123456),true), R(int(0),false), R(int(0),false), R(int(0),false), R(int(0),false), R(int(0),false), R(int(0),false), R(int(0),false), R(int(0),false), R(int(0),false), R(int(0),false), R(int(0),false), R(int(0),false), R(int(0),false), R(int(0),false), R(int(0),false), R(int(0),false), R(int(0),false), R(int(0),false) },
			INT: S{ R(int(-123456),true), R(int(0),true), R(int(123456),true) },
			FLOAT64: S{ R(int(-123),true), R(int(0),true), R(int(123),true) },
			TIME: S{ R(int(-62135596800),true), R(int(946782245),true) },
			UINT64: S{ R(int(654321),true), R(int(0),true), R(int(123456),true) },
			UINT16: S{ R(int(6543),true), R(int(0),true), R(int(123),true) },
			INT32: S{ R(int(-123456),true), R(int(0),true), R(int(123456),true) },
	},
	UINT: map[int]S{
			UINT8: S{ R(uint(0xd5),true), R(uint(0x0),true), R(uint(0x7b),true) },
			BOOL: S{ R(uint(0x1),true), R(uint(0x0),true) },
			UINT: S{ R(uint(0xff98),true), R(uint(0x0),true), R(uint(0x1e240),true) },
			FLOAT32: S{ R(uint(0xffffffffffffff85),true), R(uint(0x0),true), R(uint(0x7b),true) },
			UINT32: S{ R(uint(0x9fbf1),true), R(uint(0x0),true), R(uint(0x1e240),true) },
			INT: S{ R(uint(0xfffffffffffe1dc0),true), R(uint(0x0),true), R(uint(0x1e240),true) },
			FLOAT64: S{ R(uint(0xffffffffffffff85),true), R(uint(0x0),true), R(uint(0x7b),true) },
			SLICE: S{ R(uint(0x0),false), R(uint(0x0),false), R(uint(0x0),false) },
			MAP: S{ R(uint(0x0),false), R(uint(0x0),false), R(uint(0x0),false) },
			UINT64: S{ R(uint(0x9fbf1),true), R(uint(0x0),true), R(uint(0x1e240),true) },
			BYTES: S{ R(uint(0x0),false), R(uint(0x0),false), R(uint(0x0),false) },
			BYTE: S{ R(uint(0x80),true), R(uint(0x0),true), R(uint(0x40),true) },
			TIME: S{ R(uint(0xfffffff1886e0900),true), R(uint(0x386ec025),true) },
			INT32: S{ R(uint(0xfffffffffffe1dc0),true), R(uint(0x0),true), R(uint(0x1e240),true) },
			INT16: S{ R(uint(0xffffffffffffff85),true), R(uint(0x0),true), R(uint(0x7b),true) },
			STRING: S{ R(uint(0x0),false), R(uint(0x1e240),true), R(uint(0x0),false), R(uint(0x0),false), R(uint(0x0),false), R(uint(0x0),false), R(uint(0x0),false), R(uint(0x0),false), R(uint(0x0),false), R(uint(0x0),false), R(uint(0x0),false), 
R(uint(0x0),false), R(uint(0x0),false), R(uint(0x0),false), R(uint(0x0),false), R(uint(0x0),false), R(uint(0x0),false), R(uint(0x0),false), R(uint(0x0),false), R(uint(0x0),false) },
			UINT16: S{ R(uint(0x198f),true), R(uint(0x0),true), R(uint(0x7b),true) },
			INT64: S{ R(uint(0xfffffffffffe1dc0),true), R(uint(0x0),true), R(uint(0x1e240),true) },
			INT8: S{ R(uint(0xffffffffffffff85),true), R(uint(0x0),true), R(uint(0x7b),true) },
	},
	INT32: map[int]S{
			INT: S{ R(int32(-123456),true), R(int32(0),true), R(int32(123456),true) },
			SLICE: S{ R(int32(0),false), R(int32(0),false), R(int32(0),false) },
			FLOAT32: S{ R(int32(-123),true), R(int32(0),true), R(int32(123),true) },
			BYTES: S{ R(int32(0),false), R(int32(0),false), R(int32(0),false) },
			UINT64: S{ R(int32(654321),true), R(int32(0),true), R(int32(123456),true) },
			INT64: S{ R(int32(-123456),true), R(int32(0),true), R(int32(123456),true) },
			BYTE: S{ R(int32(128),true), R(int32(0),true), R(int32(64),true) },
			UINT: S{ R(int32(65432),true), R(int32(0),true), R(int32(123456),true) },
			INT32: S{ R(int32(-123456),true), R(int32(0),true), R(int32(123456),true) },
			INT8: S{ R(int32(-123),true), R(int32(0),true), R(int32(123),true) },
			BOOL: S{ R(int32(1),true), R(int32(0),true) },
			STRING: S{ R(int32(0),false), R(int32(123456),true), R(int32(0),false), R(int32(0),false), R(int32(0),false), R(int32(0),false), R(int32(0),false), R(int32(0),false), R(int32(0),false), R(int32(0),false), R(int32(0),false), R(int32(0),false), R(int32(0),false), R(int32(0),false), R(int32(0),false), R(int32(0),false), R(int32(0),false), R(int32(0),false), R(int32(0),false), R(int32(0),false) },
			UINT8: S{ R(int32(213),true), R(int32(0),true), R(int32(123),true) },
			FLOAT64: S{ R(int32(-123),true), R(int32(0),true), R(int32(123),true) },
			MAP: S{ R(int32(0),false), R(int32(0),false), R(int32(0),false) },
			UINT32: S{ R(int32(654321),true), R(int32(0),true), R(int32(123456),true) },
			UINT16: S{ R(int32(6543),true), R(int32(0),true), R(int32(123),true) },
			TIME: S{ R(int32(-2006054656),true), R(int32(946782245),true) },
			INT16: S{ R(int32(-123),true), R(int32(0),true), R(int32(123),true) },
	},
	FLOAT32: map[int]S{
			BYTE: S{ R(float32(128),true), R(float32(0),true), R(float32(64),true) },
			SLICE: S{ R(float32(0),false), R(float32(0),false), R(float32(0),false) },
			UINT16: S{ R(float32(6543),true), R(float32(0),true), R(float32(123),true) },
			MAP: S{ R(float32(0),false), R(float32(0),false), R(float32(0),false) },
			UINT64: S{ R(float32(654321),true), R(float32(0),true), R(float32(123456),true) },
			UINT32: S{ R(float32(654321),true), R(float32(0),true), R(float32(123456),true) },
			BYTES: S{ R(float32(0),false), R(float32(0),false), R(float32(0),false) },
			INT64: S{ R(float32(-123456),true), R(float32(0),true), R(float32(123456),true) },
			INT: S{ R(float32(-123456),true), R(float32(0),true), R(float32(123456),true) },
			FLOAT64: S{ R(float32(-123.456),true), R(float32(0),true), R(float32(123.456),true) },
			UINT: S{ R(float32(65432),true), R(float32(0),true), R(float32(123456),true) },
			BOOL: S{ R(float32(1),true), R(float32(0),true) },
			STRING: S{ R(float32(0),false), R(float32(123456),true), R(float32(0),false), R(float32(0),false), R(float32(-123.456),true), R(float32(0),false), R(float32(0),false), R(float32(0),false), R(float32(0),false), R(float32(0),false), R(float32(0),false), R(float32(0),false), R(float32(0),false), R(float32(0),false), R(float32(0),false), R(float32(0),false), R(float32(0),false), R(float32(0),false), R(float32(0),false), R(float32(0),false) },
			INT8: S{ R(float32(-123),true), R(float32(0),true), R(float32(123),true) },
			TIME: S{ R(float32(-6.2135595e+10),true), R(float32(9.467823e+08),true) },
			INT16: S{ R(float32(-123),true), R(float32(0),true), R(float32(123),true) },
			FLOAT32: S{ R(float32(-123.456),true), R(float32(0),true), R(float32(123.456),true) },
			UINT8: S{ R(float32(213),true), R(float32(0),true), R(float32(123),true) },
			INT32: S{ R(float32(-123456),true), R(float32(0),true), R(float32(123456),true) },
	},
	STRING: map[int]S{
			INT16: S{ R(string("-123"),true), R(string("0"),true), R(string("123"),true) },
			STRING: S{ R(string(""),true), R(string("123456"),true), R(string("mystring"),true), R(string("true"),true), R(string("-123.456"),true), R(string("2000-01-02T03:04:05.000000006Z"),true), R(string("2000-01-02T03:04:05Z"),true), R(string("Sun Jan  2 03:04:05 2000"),true), R(string("Sun Jan  2 03:04:05 UTC 2000"),true), R(string("Sun Jan 02 03:04:05 +0000 2000"),true), R(string("02 Jan 00 03:04 UTC"),true), R(string("02 Jan 00 03:04 +0000"),true), R(string("Sunday, 02-Jan-00 03:04:05 UTC"),true), R(string("Sun, 02 Jan 2000 03:04:05 UTC"),true), R(string("Sun, 02 Jan 2000 03:04:05 +0000"),true), R(string("2000-01-02 03:04:05"),true), R(string("Jan  2 03:04:05.000"),true), R(string("Jan  2 03:04:05"),true), R(string("3:04AM"),true), R(string("2000-01-02"),true) },
			BYTE: S{ R(string("128"),true), R(string("0"),true), R(string("64"),true) },
			TIME: S{ R(string("0001-01-01T00:00:00Z"),true), R(string("2000-01-02T03:04:05.000000006Z"),true) },
			INT8: S{ R(string("-123"),true), R(string("0"),true), R(string("123"),true) },
			FLOAT32: S{ R(string("-123.45600128173828"),true), R(string("0"),true), R(string("123.45600128173828"),true) },
			UINT32: S{ R(string("654321"),true), R(string("0"),true), R(string("123456"),true) },
			BOOL: S{ R(string("true"),true), R(string("false"),true) },
			BYTES: S{ R(string(""),true), R(string(""),true), R(string("\x01\x02\x03"),true) },
			UINT16: S{ R(string("6543"),true), R(string("0"),true), R(string("123"),true) },
			FLOAT64: S{ R(string("-123.456"),true), R(string("0"),true), R(string("123.456"),true) },
			UINT8: S{ R(string("213"),true), R(string("0"),true), R(string("123"),true) },
			INT64: S{ R(string("-123456"),true), R(string("0"),true), R(string("123456"),true) },
			UINT: S{ R(string("65432"),true), R(string("0"),true), R(string("123456"),true) },
			INT32: S{ R(string("-123456"),true), R(string("0"),true), R(string("123456"),true) },
			MAP: S{ R(string(""),false), R(string(""),false), R(string(""),false) },
			INT: S{ R(string("-123456"),true), R(string("0"),true), R(string("123456"),true) },
			UINT64: S{ R(string("654321"),true), R(string("0"),true), R(string("123456"),true) },
			SLICE: S{ R(string(""),false), R(string(""),false), R(string(""),false) },
	},
	BYTES: map[int]S{
			INT64: S{ R([]byte([]byte(nil)),false), R([]byte([]byte(nil)),false), R([]byte([]byte(nil)),false) },
			UINT: S{ R([]byte([]byte(nil)),false), R([]byte([]byte(nil)),false), R([]byte([]byte(nil)),false) },
			UINT16: S{ R([]byte([]byte(nil)),false), R([]byte([]byte(nil)),false), R([]byte([]byte(nil)),false) },
			FLOAT32: S{ R([]byte([]byte(nil)),false), R([]byte([]byte(nil)),false), R([]byte([]byte(nil)),false) },
			INT: S{ R([]byte([]byte(nil)),false), R([]byte([]byte(nil)),false), R([]byte([]byte(nil)),false) },
			INT16: S{ R([]byte([]byte(nil)),false), R([]byte([]byte(nil)),false), R([]byte([]byte(nil)),false) },
			BYTES: S{ R([]byte([]byte(nil)),true), R([]byte([]byte{}),true), R([]byte([]byte{0x1, 0x2, 0x3}),true) },
			UINT8: S{ R([]byte([]byte(nil)),false), R([]byte([]byte(nil)),false), R([]byte([]byte(nil)),false) },
			BOOL: S{ R([]byte([]byte(nil)),false), R([]byte([]byte(nil)),false) },
			SLICE: S{ R([]byte([]byte(nil)),false), R([]byte([]byte(nil)),false), R([]byte([]byte(nil)),false) },
			BYTE: S{ R([]byte([]byte(nil)),false), R([]byte([]byte(nil)),false), R([]byte([]byte(nil)),false) },
			FLOAT64: S{ R([]byte([]byte(nil)),false), R([]byte([]byte(nil)),false), R([]byte([]byte(nil)),false) },
			INT32: S{ R([]byte([]byte(nil)),false), R([]byte([]byte(nil)),false), R([]byte([]byte(nil)),false) },
			TIME: S{ R([]byte([]byte(nil)),false), R([]byte([]byte(nil)),false) },
			UINT32: S{ R([]byte([]byte(nil)),false), R([]byte([]byte(nil)),false), R([]byte([]byte(nil)),false) },
			INT8: S{ R([]byte([]byte(nil)),false), R([]byte([]byte(nil)),false), R([]byte([]byte(nil)),false) },
			MAP: S{ R([]byte([]byte(nil)),false), R([]byte([]byte(nil)),false), R([]byte([]byte(nil)),false) },
			STRING: S{ R([]byte([]byte{}),true), R([]byte([]byte{0x31, 0x32, 0x33, 0x34, 0x35, 0x36}),true), R([]byte([]byte{0x6d, 0x79, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67}),true), R([]byte([]byte{0x74, 0x72, 0x75, 0x65}),true), R([]byte([]byte{0x2d, 0x31, 0x32, 0x33, 0x2e, 0x34, 0x35, 0x36}),true), R([]byte([]byte{0x32, 0x30, 0x30, 0x30, 0x2d, 0x30, 0x31, 0x2d, 0x30, 0x32, 0x54, 0x30, 0x33, 0x3a, 0x30, 0x34, 0x3a, 0x30, 0x35, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x36, 0x5a}),true), R([]byte([]byte{0x32, 0x30, 0x30, 0x30, 0x2d, 0x30, 0x31, 0x2d, 0x30, 0x32, 0x54, 0x30, 0x33, 0x3a, 0x30, 0x34, 0x3a, 0x30, 0x35, 0x5a}),true), R([]byte([]byte{0x53, 0x75, 0x6e, 0x20, 0x4a, 0x61, 0x6e, 0x20, 0x20, 0x32, 0x20, 0x30, 0x33, 0x3a, 0x30, 0x34, 0x3a, 0x30, 0x35, 0x20, 0x32, 0x30, 0x30, 0x30}),true), R([]byte([]byte{0x53, 0x75, 0x6e, 0x20, 0x4a, 0x61, 0x6e, 0x20, 0x20, 0x32, 0x20, 0x30, 0x33, 0x3a, 0x30, 0x34, 0x3a, 0x30, 0x35, 0x20, 0x55, 0x54, 0x43, 0x20, 0x32, 0x30, 0x30, 0x30}),true), R([]byte([]byte{0x53, 0x75, 0x6e, 0x20, 0x4a, 0x61, 0x6e, 0x20, 0x30, 0x32, 0x20, 0x30, 0x33, 0x3a, 0x30, 0x34, 0x3a, 0x30, 0x35, 0x20, 0x2b, 0x30, 0x30, 0x30, 0x30, 0x20, 0x32, 0x30, 0x30, 0x30}),true), R([]byte([]byte{0x30, 0x32, 0x20, 0x4a, 0x61, 0x6e, 0x20, 0x30, 0x30, 0x20, 0x30, 0x33, 0x3a, 0x30, 0x34, 0x20, 0x55, 0x54, 0x43}),true), R([]byte([]byte{0x30, 0x32, 0x20, 0x4a, 0x61, 0x6e, 0x20, 0x30, 0x30, 0x20, 0x30, 0x33, 0x3a, 0x30, 0x34, 0x20, 0x2b, 0x30, 0x30, 0x30, 0x30}),true), R([]byte([]byte{0x53, 0x75, 0x6e, 0x64, 0x61, 0x79, 0x2c, 0x20, 0x30, 0x32, 0x2d, 0x4a, 0x61, 0x6e, 0x2d, 0x30, 0x30, 0x20, 0x30, 0x33, 0x3a, 0x30, 0x34, 0x3a, 0x30, 0x35, 0x20, 0x55, 0x54, 0x43}),true), R([]byte([]byte{0x53, 0x75, 0x6e, 0x2c, 0x20, 0x30, 0x32, 0x20, 0x4a, 0x61, 0x6e, 0x20, 0x32, 0x30, 0x30, 0x30, 0x20, 0x30, 0x33, 0x3a, 0x30, 0x34, 0x3a, 0x30, 0x35, 0x20, 0x55, 0x54, 0x43}),true), R([]byte([]byte{0x53, 0x75, 0x6e, 0x2c, 0x20, 0x30, 0x32, 0x20, 0x4a, 0x61, 0x6e, 0x20, 0x32, 0x30, 0x30, 0x30, 0x20, 0x30, 0x33, 0x3a, 0x30, 0x34, 0x3a, 0x30, 0x35, 0x20, 0x2b, 0x30, 0x30, 0x30, 0x30}),true), R([]byte([]byte{0x32, 0x30, 0x30, 0x30, 0x2d, 0x30, 0x31, 0x2d, 0x30, 0x32, 0x20, 0x30, 0x33, 0x3a, 0x30, 0x34, 0x3a, 0x30, 0x35}),true), R([]byte([]byte{0x4a, 0x61, 0x6e, 0x20, 0x20, 0x32, 0x20, 0x30, 0x33, 0x3a, 0x30, 0x34, 0x3a, 0x30, 0x35, 0x2e, 0x30, 0x30, 0x30}),true), R([]byte([]byte{0x4a, 0x61, 0x6e, 0x20, 0x20, 0x32, 0x20, 0x30, 0x33, 0x3a, 0x30, 0x34, 0x3a, 0x30, 0x35}),true), R([]byte([]byte{0x33, 0x3a, 0x30, 0x34, 0x41, 0x4d}),true), R([]byte([]byte{0x32, 0x30, 0x30, 0x30, 0x2d, 0x30, 0x31, 0x2d, 0x30, 0x32}),true) },
			UINT64: S{ R([]byte([]byte(nil)),false), R([]byte([]byte(nil)),false), R([]byte([]byte(nil)),false) },
	},
}

func TestInt64(t *testing.T) {

    total := Sum(5, 5)
    if total != 10 {
       t.Errorf("Sum was incorrect, got: %d, want: %d.", total, 10)
    }
}
